from django.db import models
from django.utils import timezone
from datetime import timedelta
from django.core.mail import send_mail
from django.http import JsonResponse

class Member(models.Model):
    # Personal Information
    full_name = models.CharField(max_length=255)
    nin_number = models.CharField(max_length=14, unique=True)
    gender = models.CharField(max_length=20)
    age = models.IntegerField()
    marital_status = models.CharField(max_length=20)
    dob = models.DateField(null=True, blank=True)
    place_of_birth = models.CharField(max_length=255)
    current_address = models.TextField()
    email = models.EmailField(unique=True)
    signature = models.CharField(max_length=100, null=True, blank=True)

    # Professional Information
    professional = models.CharField(max_length=255)
    place_of_work = models.CharField(max_length=255)
    time_joined = models.DateTimeField(null=True, blank=True)

    # Next of Kin Information
    next_of_kin_name = models.CharField(max_length=255)
    next_of_kin_email = models.EmailField()
    next_of_kin_phone = models.CharField(max_length=20)
    next_of_kin_professional = models.CharField(max_length=255)

    # OTP Information
    otp = models.CharField(max_length=6, null=True, blank=True)
    otp_created_at = models.DateTimeField(null=True, blank=True)
    #otp_attempts = models.IntegerField(default=0)
    is_verified = models.BooleanField(default=False)
    is_locked = models.BooleanField(default=False)
    lock_until = models.DateTimeField(null=True, blank=True)

    def generate_otp(self):
        """Generate a 6-digit OTP and set expiry (5 minutes)."""
        import random
        self.otp = str(random.randint(100000, 999999))
        self.otp_created_at = timezone.now()
        self.save()
        return self.otp

    def is_otp_expired(self):
        """Check if OTP is older than 5 minutes"""
        if not self.otp_created_at:
            return True
        return timezone.now() > self.otp_created_at + timedelta(minutes=5)

    def increment_otp_attempts(self):
        """Track failed attempts and lock account if needed"""
        self.otp_attempts += 1
        if self.otp_attempts >= 3:  # Lock after 3 failed attempts
            self.is_locked = True
            self.lock_until = timezone.now() + timedelta(minutes=15)
        self.save()

    def reset_otp_security(self):
        """Clear OTP data after successful verification"""
        self.otp = None
        self.otp_created_at = None
        self.otp_attempts = 0
        self.save()

    def is_account_locked(self):
        """Check if account is temporarily locked"""
        if self.lock_until and timezone.now() < self.lock_until:
            return True
        self.is_locked = False  # Auto-unlock after time passes
        self.save()
        return False

    def __str__(self):
        return self.full_name

    #from django.db import models

class Message(models.Model):
    name = models.CharField(max_length=255)
    email = models.EmailField()
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Message from {self.name}"

    class Meta:
        ordering = ['full_name']
